Test building a snap on risv64
------------------------------

Building the hello world snap using snapcraft on riscv64 is tested.

Test scripts
------------

The test steps are described in a YAML file (riscv64.yaml) and run
via src/test.py.

The generic structure of a test script is

.. code-block:: yaml

    ---
    steps:

      - name: step 1
        command:
          echo -n 'Hello' && echo ' world'
        expected: world

      - name: step 2
        command:

The following types of steps are supported:

command
  Execute a command using subprocess.
  The step completes when the command is completed.
  The stdout and stderr output is recorded.

  The step takes the following arguments:

  name
    identifier used for logging

  command
    string with command to execute

  expected
    regular expression to be matched by stdout output
    or an array of such expressions

  expected_stderr
    regular expression to be matched by stderr output
    or an array of such expressions

launch
  Execute a command using subprocess.
  The step completes when the last ``expected`` regular expression is met.
  The subprocess lives on and is not expected to stop
  The stdout and stderr output is recorded.

  The step takes the following arguments:

  name
    identifier used for logging and stopping the process

  launch
    string with command to execute

  expected
    regular expression to be matched by stdout output
    or an array of such expressions.
    The step completes when the last regular expression is met in the sequence
    of occurance in the array.

stop
  Stop a launched subprocess.

  The step takes the following arguments:

  name
    identifier used for logging

  stop
    The value of name used in the launch stop.

stopqemu
  Stop a launched subprocess running QEMU.
  QEMU is stopped by sending <CTRL-A><x>.

  The step takes the following arguments:

  name
    identifier used for logging

  stopqemu
    The value of name used in the launch stop.

Running the test
----------------

The test is executed using src/test.py which takes the following arguments

::

   test.py [-h] -f SCRIPT [-l LOG]

\-h, --help
    show help message and exit

\-f SCRIPT, --script SCRIPT
    script file name

\-l LOG, --log LOG
    log file name

test.sh is supplied as wrapper around src/test.py.
The first argument is the test script.
The second optional argument is the name of the log file.
If none is provided, it is autogenerated.

.. code-block:: bash

    ./test.sh riscv64.yaml

Code
----

src/test.py
    This is the test runner script.

userdata.py
    This helper script creates the user-data file for cloud-init of the main
    virtual machine.

clientdata.py
    This helper script creates the user-data file for cloud-init of the
    child virtual machines.
